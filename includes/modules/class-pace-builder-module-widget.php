<?php

/**
 * Widget Module
 *
 * @since      1.0.0
 * @package    PTPB
 * @subpackage PTPB/includes
 * @author     Pace Themes <dev@pacethemes.com>
 */

if ( ! class_exists( 'PTPB_Module_Widget' ) ) :
	/**
	 * Class to handle HTML generation for Widgets
	 * Unlike all the other PaceBuilder Module classes, this class is not a direct 'module' which can be inserted
	 * It is like an abstract class for all WordPress Widget Modules
	 * DO NOT override or extend this class
	 */
	class PTPB_Module_Widget extends PTPB_Module {

		/**
		 * PTPB_Module_Widget Constructor
		 */
		public function __construct() {
			parent::__construct();
			$this->icon        = 'dashicons-format-image';
			$this->label       = __( 'Widget', 'pace-builder' );
			$this->description = __( 'Widget', 'pace-builder' );
		}

		/**
		 * Widget Fields and Form are generated by WordPress itself, this method exists here only as a placeholder
		 * @return array
		 */
		public function fields() {
			return array();
		}

		/**
		 * Generate module content
		 * @param $module
		 *
		 * @return string
		 */
		public function get_content( $module ) {

			return sprintf( "<div class='pt-pb-module-widget clearfix' %s></div>",
				ptpb_generate_data_attr( 
					array( 
						'pb-process' => 'true', 
						'type' => 'widget', 
						'widget' => $module['widget'], 
						'instance' => htmlspecialchars(
											json_encode( array_merge( $module['instance'], array( 'id' => $module['id'] ) ) ),
											ENT_QUOTES,
											'UTF-8' 
										)
					)
				)
			);
		}

		/**
		 * Filter post_content to add/insert the Widget HTML
		 * @param $content
		 * @param $col
		 *
		 * @return mixed
		 */
		public function filter_content( $content, $col ) {
			$data   = ptpb_extract_data_attr( $col );
			$widget = $col . $this->render_widget( $data['widget'], json_decode( htmlspecialchars_decode( $data['instance'], ENT_QUOTES ), true ) );

			return str_replace( $col, $widget, $content );
		}

		/**
		 * Render a widget content with all the PaceBuilder specific fields
		 *
		 * @param string $widget The class of the widget
		 * @param array $instance Widget values
		 *
		 * @return mixed|string The content
		 */
		private function render_widget( $widget, $instance = array() ) {
			global $wp_widget_factory;

			// filter to replace missing widgets
			$the_widget = ! empty( $wp_widget_factory->widgets[ $widget ] ) ? $wp_widget_factory->widgets[ $widget ] : false;
			$the_widget = apply_filters( 'ptpb_widget_object', $the_widget, $widget );

			if ( empty( $the_widget ) || ! is_a( $the_widget, 'WP_Widget' ) ) {
				return;
			}

			// Filter and sanitize the classes
			$classes = apply_filters( 'ptpb_widget_classes', array( 'pt-pb-widget' ), $widget, $instance );
			$classes = explode( ' ', implode( ' ', $classes ) );
			$classes = array_filter( $classes );
			$classes = array_unique( $classes );
			$classes = array_map( 'sanitize_html_class', $classes );

			$args = array(
				'before_widget' => '<div class="' . esc_attr( implode( ' ', $classes ) ) . '" id="widget_' . $instance['id'] . '">',
				'after_widget'  => '</div>',
				'before_title'  => apply_filters( 'ptpb_widget_before_title', '<h3 class="widget-title">' ),
				'after_title'   => apply_filters( 'ptpb_widget_after_title', '</h3>' ),
				'widget_id'     => 'widget-' . $instance['id']
			);

			ob_start();
			$return = $the_widget->widget( $args, $instance );

			$html = ob_get_clean();

			$html = apply_filters( 'ptpb_widget', $html, $widget, $instance );

			// Add all the information fields
			return $html;
		}

	}
endif;